//Modular Scale
@function modular-scale($number, $base-font-size: 1rem, $scale: $heading-scale) {
    @if $number == 1 {
        @return $base-font-size * $scale;
    }
    @if $number == 2 {
        @return ($base-font-size * $scale) * $scale;
    }
    @if $number == 3 {
        @return (($base-font-size * $scale) * $scale) * $scale;
    }
    @if $number == 4 {
        @return ((($base-font-size * $scale) * $scale) * $scale) * $scale;
    }
    @if $number == 5 {
        @return (((($base-font-size * $scale) * $scale) * $scale) * $scale) * $scale;
    }
}

//Fluid Typography
@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
    @each $property in $properties {
        #{$property}: $min-value;
    }
    @media (min-width: $min-vw) {
        @each $property in $properties {
            #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
        }
    }
    @media (min-width: $max-vw) {
        @each $property in $properties {
            #{$property}: $max-value;
        }
    }
}

@function strip-unit($number) {
    @if type-of($number) == "number" and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }
    @return $number;
}

// Breakpoints
@mixin bp($width, $type: max) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @media (#{$type}-width: $width) {
            @content;
        }
    }
}
